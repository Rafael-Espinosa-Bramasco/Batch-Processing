/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import libs.TextPrompt;
import libs.Process;
import libs.Batch;
/**
 *
 * @author rafael
 */
public class BPM extends javax.swing.JFrame {

    /**
     * Creates new form BPM
     */
    public BPM() {
        initComponents();
        
        this.state = true;
            /* State values:
            *       false -> PBI
            *       true -> PBN
            */
        
        this.swapAvalibleFields();
        
        this.PBI_BTN.doClick();
        
        TextPrompt PNPH = new TextPrompt("Your Name",this.PNField);
        TextPrompt OP1PH = new TextPrompt("X",this.OPN1Field);
        TextPrompt OP2PH = new TextPrompt("Y",this.OPN2Field);
        TextPrompt METPH = new TextPrompt("MET in seconds",this.METField);
        TextPrompt PIDPH = new TextPrompt("Program ID",this.PIDField);
        TextPrompt PBNPH = new TextPrompt("Number of Processes",this.PBN_Input);
        
        PNPH.changeAlpha(0.75f);
        PNPH.changeStyle(Font.ITALIC);
        OP1PH.changeAlpha(0.75f);
        OP1PH.changeStyle(Font.ITALIC);
        OP2PH.changeAlpha(0.75f);
        OP2PH.changeStyle(Font.ITALIC);
        METPH.changeAlpha(0.75f);
        METPH.changeStyle(Font.ITALIC);
        PIDPH.changeAlpha(0.75f);
        PIDPH.changeStyle(Font.ITALIC);
        PBNPH.changeAlpha(0.75f);
        PBNPH.changeStyle(Font.ITALIC);
        
        this.METField.setEnabled(false);
        
        this.updatePID();
        
        this.setMET();
        
        this.ProcessCount = 0;
        
        this.BatchsNeeded = 0;
        
        this.initRandomValues();
    }
    
    // Variables
    int PAG_ID = 0;                // ID generator
    ArrayList<Process> IDs = new ArrayList();    // ID's array
    ArrayList<Batch> Batchs = new ArrayList();
    int ProcessCount;
    int BatchsNeeded;
    boolean state;
    BPMThread processesThread;
    
    // To randomize
    ArrayList<String> Names = new ArrayList();
    
    // PBN variables
    ArrayList<Batch> PBNBatchs = new ArrayList();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PBX = new javax.swing.ButtonGroup();
        BPMPanel = new javax.swing.JPanel();
        METLabel = new javax.swing.JLabel();
        PNLabel = new javax.swing.JLabel();
        OPLabel = new javax.swing.JLabel();
        PIDLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        METField = new javax.swing.JTextField();
        PNField = new javax.swing.JTextField();
        PIDField = new javax.swing.JTextField();
        ResetFields = new javax.swing.JButton();
        RandomizeData = new javax.swing.JButton();
        AddProcess = new javax.swing.JButton();
        OPN2Field = new javax.swing.JTextField();
        OPN1Field = new javax.swing.JTextField();
        OPOption = new javax.swing.JComboBox<>();
        PALabel = new javax.swing.JLabel();
        BNLabel = new javax.swing.JLabel();
        PANumber = new javax.swing.JLabel();
        BNNumber = new javax.swing.JLabel();
        StartSimulation = new javax.swing.JButton();
        PBI_BTN = new javax.swing.JRadioButton();
        PBN_BTN = new javax.swing.JRadioButton();
        PBN_Input = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        BNLabelPBN = new javax.swing.JLabel();
        BNNumberPBN = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Batch Processing - MT Panel");
        setResizable(false);

        BPMPanel.setBackground(new java.awt.Color(255, 255, 255));
        BPMPanel.setPreferredSize(new java.awt.Dimension(600, 210));

        METLabel.setText("Maximum Estimated Time");

        PNLabel.setText("Programmer Name");

        OPLabel.setText("Operation");

        PIDLabel.setText("Program ID");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        METField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        PNField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        PNField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PNFieldKeyTyped(evt);
            }
        });

        PIDField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        ResetFields.setText("Reset");
        ResetFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetFieldsActionPerformed(evt);
            }
        });

        RandomizeData.setText("Random");
        RandomizeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeDataActionPerformed(evt);
            }
        });

        AddProcess.setText("Add");
        AddProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProcessActionPerformed(evt);
            }
        });

        OPN2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        OPN2Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                OPN2FieldKeyTyped(evt);
            }
        });

        OPN1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        OPN1Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                OPN1FieldKeyTyped(evt);
            }
        });

        OPOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "+", "-", "x", "/", "%", "POW" }));
        OPOption.setSelectedItem("+");
        OPOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OPOptionItemStateChanged(evt);
            }
        });

        PALabel.setText("Processes Added");

        BNLabel.setText("Batch's Needed");

        PANumber.setText("0");

        BNNumber.setText("0");

        StartSimulation.setText("Start Simulation");
        StartSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartSimulationActionPerformed(evt);
            }
        });

        PBX.add(PBI_BTN);
        PBI_BTN.setText("Preparation by Input");
        PBI_BTN.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PBI_BTNItemStateChanged(evt);
            }
        });

        PBX.add(PBN_BTN);
        PBN_BTN.setText("Preparation by Number");

        PBN_Input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PBN_InputKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                PBN_InputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                PBN_InputKeyTyped(evt);
            }
        });

        BNLabelPBN.setText("Batch's Needed");

        BNNumberPBN.setText("0");

        javax.swing.GroupLayout BPMPanelLayout = new javax.swing.GroupLayout(BPMPanel);
        BPMPanel.setLayout(BPMPanelLayout);
        BPMPanelLayout.setHorizontalGroup(
            BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BPMPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(BPMPanelLayout.createSequentialGroup()
                        .addComponent(PNLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PNField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BPMPanelLayout.createSequentialGroup()
                        .addComponent(PIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BPMPanelLayout.createSequentialGroup()
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(METLabel)
                            .addComponent(OPLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(BPMPanelLayout.createSequentialGroup()
                                .addComponent(OPN1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OPOption, 0, 1, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OPN2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(METField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(BPMPanelLayout.createSequentialGroup()
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RandomizeData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ResetFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AddProcess)
                        .addGap(24, 24, 24)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PALabel)
                            .addComponent(BNLabel))
                        .addGap(43, 43, 43)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BNNumber)
                            .addComponent(PANumber))))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartSimulation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PBN_Input)
                    .addComponent(jSeparator2)
                    .addGroup(BPMPanelLayout.createSequentialGroup()
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PBN_BTN)
                            .addComponent(PBI_BTN)
                            .addGroup(BPMPanelLayout.createSequentialGroup()
                                .addComponent(BNLabelPBN)
                                .addGap(43, 43, 43)
                                .addComponent(BNNumberPBN)))
                        .addGap(0, 59, Short.MAX_VALUE)))
                .addContainerGap())
        );
        BPMPanelLayout.setVerticalGroup(
            BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BPMPanelLayout.createSequentialGroup()
                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BPMPanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PNLabel)
                            .addComponent(PNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(OPLabel)
                            .addComponent(OPN2Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OPN1Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(OPOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(METLabel)
                            .addComponent(METField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PIDLabel)
                            .addComponent(PIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(BPMPanelLayout.createSequentialGroup()
                                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(AddProcess)
                                    .addComponent(RandomizeData))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ResetFields))
                            .addGroup(BPMPanelLayout.createSequentialGroup()
                                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(PALabel)
                                    .addComponent(PANumber))
                                .addGap(18, 18, 18)
                                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BNLabel)
                                    .addComponent(BNNumber))))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, BPMPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(BPMPanelLayout.createSequentialGroup()
                                .addComponent(PBI_BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PBN_BTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PBN_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(BPMPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(BNLabelPBN)
                                    .addComponent(BNNumberPBN))
                                .addGap(18, 18, 18)
                                .addComponent(StartSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator1))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BPMPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BPMPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // My Functions
    
    public void pauseThread() throws InterruptedException{
        synchronized(processesThread){
            processesThread.suspend();
        }
    }
    
    public void continueThread(){
        synchronized(processesThread){
            processesThread.resume();
        }
    }
    
    private void calculatePBsPBN(){
        // Calculate new things
        if(!this.PBN_Input.getText().isEmpty()){
            this.BatchsNeeded = (int) java.lang.Math.ceil(Double.parseDouble(this.PBN_Input.getText()) / 3.0);
            this.BNNumberPBN.setText(String.valueOf(this.BatchsNeeded));
        }else{
            this.BNNumberPBN.setText("0");
        }
    }
    
    private void swapAvalibleFields(){
        if(this.state){
            // Switch PBI to PBN
            this.PNField.setEnabled(false);
            this.OPN1Field.setEnabled(false);
            this.OPN2Field.setEnabled(false);
            this.OPOption.setEnabled(false);
            this.METField.setText("Preparation by Input disabled!");
            this.PIDField.setEnabled(false);
            this.ResetFields.setEnabled(false);
            this.RandomizeData.setEnabled(false);
            this.AddProcess.setEnabled(false);
            this.PANumber.setText("X");
            this.BNNumber.setText("X");
            
            this.PBN_Input.setEnabled(true);
            this.calculatePBsPBN();
        }else{
            // Switch PBN to PBI
            this.PNField.setEnabled(true);
            this.OPN1Field.setEnabled(true);
            this.OPN2Field.setEnabled(true);
            this.OPOption.setEnabled(true);
            this.setMET();
            this.PIDField.setEnabled(true);
            this.ResetFields.setEnabled(true);
            this.RandomizeData.setEnabled(true);
            this.AddProcess.setEnabled(true);
            
            this.calculateB_P();
            
            this.PBN_Input.setEnabled(false);
            
            this.BNNumberPBN.setText("X");
        }
        this.state = !this.state;
    }
    
    private void initRandomValues(){
        Names.add("Rafael Espinosa");
        Names.add("Natalia Ruiz");
        Names.add("Allan Rick");
        Names.add("Jhon Wick");
        Names.add("Amadeus Mozart");
        Names.add("James Franco");
        Names.add("Ted Bundy");
        Names.add("Derniere Damnski");
        Names.add("LeNuit Vlachno");
        Names.add("Luis Santollo");
        Names.add("Alejandra Bustamante");
    }
    
    private boolean validateFields(){
        // Check if there is an empty field
        if(this.PNField.getText().compareTo("") == 0 || this.OPN1Field.getText().compareTo("") == 0 || this.OPN2Field.getText().compareTo("") == 0 || this.METField.getText().compareTo("") == 0 || this.PIDField.getText().compareTo("") == 0){
            JOptionPane.showMessageDialog(null, "You must fill all the fields!");
            return false;
        }
        // Validate operands for operation and MET
        else if(Integer.parseInt(this.OPN2Field.getText()) == 0 && this.OPOption.getSelectedItem().toString().compareTo("/") == 0){
            JOptionPane.showMessageDialog(null, "Second operand can't be zero for a division!");
            return false;
        }
        else if(Integer.parseInt(this.METField.getText()) == 0){
            JOptionPane.showMessageDialog(null, "MET can't be zero or less!");
            return false;
        }

        return true;
    }
    
    private void updatePID(){
        this.PIDField.setText("P".concat(String.valueOf(this.PAG_ID)).concat("ID"));
    }
    
    private boolean IDExists(String element){
        int IDLength = this.IDs.size();
        if(IDLength == 0){
            return false;
        }else{
            for(int i = 0 ; i < IDLength ; i++){
                if(this.IDs.get(i).getProgramID().compareTo(element) == 0){
                    return true;
                }
            }
            return false;
        }
    }
    
    private void setMET(){
        switch(this.OPOption.getSelectedItem().toString()){
            case "+":
                this.METField.setText("1");
                break;
            case "-":
                this.METField.setText("1");
                break;
            case "x":
                this.METField.setText("3");
                break;
            case "/":
                this.METField.setText("3");
                break;
            case "%":
                this.METField.setText("4");
                break;
            case "POW":
                this.METField.setText("5");
                break;
        }
    }
    
    private void resetAllFields(){
        this.PNField.setText("");
        this.OPN1Field.setText("");
        this.OPN2Field.setText("");
        this.updatePID();
    }
    
    private void calculateB_P(){
        this.PANumber.setText(String.valueOf(this.ProcessCount));
        
        this.BatchsNeeded = (int) java.lang.Math.ceil((double)this.ProcessCount / 4.0);
        this.BNNumber.setText(String.valueOf(this.BatchsNeeded));
    }
    
    private void randomizePBN(){
        
        // Programmer name isnt necessary
        int OP1;
        int OP2;
        String OP = "";
        int MET;
        String PID;
        int PIDCount = 0;
        int BIDCount = 0;
        
        int numberOfProcesses = Integer.parseInt(this.PBN_Input.getText());
        
        Process newProcess;
        Batch newBatch = null;
        
        while(numberOfProcesses > 0){
            
            if(newBatch == null){
                newBatch = new Batch(String.valueOf(BIDCount).concat("BID"));
                BIDCount++;
            }else if(newBatch.getNumberOfProcesses() == 3){
                this.PBNBatchs.add(newBatch);
                newBatch = new Batch(String.valueOf(BIDCount).concat("BID"));
                BIDCount++;
            }
            
            OP1 = (int) (Math.random() * 100);
            
            switch((int) (Math.random() *10+1)){
                case 1, 2 -> {OP = "+";}
                case 3, 4 -> {OP = "-";}
                case 5, 6 -> {OP = "x";}
                case 7, 8 -> {OP = "/";}
                case 9, 10 -> {OP = "%";}
            }
            
            MET = (int) (7 + Math.random() * (18 - 7));
            
            if(OP.compareTo("/") == 0){
                OP2 = (int) (Math.random() *100+1);
            }else{
                OP2 = (int) (Math.random() *100+0);
            }

            PID = "P".concat(String.valueOf(PIDCount)).concat("ID");
            PIDCount++;
            
            newProcess = new Process("Randomizer",String.valueOf(OP1),String.valueOf(OP2),OP,MET,PID);
            newBatch.addProcess(newProcess);
            
            if(numberOfProcesses == 1){
                this.PBNBatchs.add(newBatch);
            }
            
            numberOfProcesses--;
        }
    }
    
    private void randomize(){
        this.PNField.setText(this.Names.get((int)(Math.random()*11)));
        this.OPN1Field.setText(String.valueOf((int)(Math.random()*100)));
        this.OPN2Field.setText(String.valueOf((int)(Math.random()*100)));
        
        // Randomize operation
        switch((int)(Math.random()*12+1)){
            case 1, 2 -> this.OPOption.selectWithKeyChar('+');
            case 3, 4 -> this.OPOption.selectWithKeyChar('-');
            case 5, 6 -> this.OPOption.selectWithKeyChar('*');
            case 7, 8 -> {
                this.OPOption.selectWithKeyChar('/');
                if(Double.parseDouble(this.OPN2Field.getText()) > 100.0){
                    this.OPN2Field.setText(String.valueOf((int)(Math.random()*1000+1)));
                }
            }
            case 9, 10 -> this.OPOption.selectWithKeyChar('%');
            case 11, 12 -> {
                this.OPOption.selectWithKeyChar('p');
                if(Double.parseDouble(this.OPN2Field.getText()) > 100.0){
                    this.OPN2Field.setText(String.valueOf((int)(Math.random()*100+0)));
                }
            }
        }
        
        this.setMET();
    }
    
    //// Listeners
    
    private void AddProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProcessActionPerformed
        // TODO add your handling code here:
        if(this.validateFields()){
            // Check the ID
            if(this.IDExists(this.PIDField.getText())){
                // ID exists
                JOptionPane.showMessageDialog(null, "Program ID already exists!");
            }
            else {
                // ID doesn't exists, ADD THE ELEMENT
                Process NewProcess = new Process(this.PNField.getText(), this.OPN1Field.getText(), this.OPN2Field.getText(), this.OPOption.getSelectedItem().toString(), Integer.parseInt(this.METField.getText()), this.PIDField.getText());
                this.IDs.add(NewProcess);
                
                this.PAG_ID++;
                this.ProcessCount++;
                
                this.calculateB_P();
                
                this.resetAllFields();
            }
        }
    }//GEN-LAST:event_AddProcessActionPerformed

    private void OPOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OPOptionItemStateChanged
        // TODO add your handling code here:
        if(evt.getItem().toString().compareTo("/") == 0 && Double.parseDouble(this.OPN2Field.getText()) == 0.0 || this.OPN2Field.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Second operand cannot be 0 on division!");
        }
        this.setMET();
    }//GEN-LAST:event_OPOptionItemStateChanged

    private void PNFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PNFieldKeyTyped
        // TODO add your handling code here:
        if(!java.lang.Character.isAlphabetic(evt.getKeyChar()) && (evt.getKeyChar() == ' ' && this.PNField.getText().charAt(this.PNField.getText().length() - 1) == ' ')){
            evt.consume();
        }else if(java.lang.Character.isDigit(evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_PNFieldKeyTyped

    private void OPN1FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OPN1FieldKeyTyped
        // TODO add your handling code here:
        if(!(this.OPN1Field.getText() + evt.getKeyChar()).matches("([0-9]+\\.?[0-9]+)|([0-9]+)|[0-9]+\\.?")){
            evt.consume();
        }
    }//GEN-LAST:event_OPN1FieldKeyTyped

    private void OPN2FieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_OPN2FieldKeyTyped
        // TODO add your handling code here:
        if(!(this.OPN2Field.getText() + evt.getKeyChar()).matches("([0-9]+\\.?[0-9]+)|([0-9]+)|[0-9]+\\.?")){
            evt.consume();
        }
    }//GEN-LAST:event_OPN2FieldKeyTyped

    private void ResetFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetFieldsActionPerformed
        // TODO add your handling code here:
        this.resetAllFields();
    }//GEN-LAST:event_ResetFieldsActionPerformed

    private void RandomizeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeDataActionPerformed
        // TODO add your handling code here:
        this.randomize();
    }//GEN-LAST:event_RandomizeDataActionPerformed

    private void StartSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartSimulationActionPerformed
        // TODO add your handling code here:
        if(this.PBI_BTN.isSelected()){
            // PBI mode
            if(this.IDs.isEmpty()){
                JOptionPane.showMessageDialog(this, "Please add some processes first!");
                return;
            }

            int BID = 1;
            while(this.ProcessCount > 0){
                Batch newBatch = new Batch(String.valueOf(BID).concat("BID"));
                while(newBatch.getNumberOfProcesses() < 4 && this.ProcessCount > 0){
                    newBatch.addProcess(this.IDs.get(0));
                    this.IDs.remove(0);
                    this.ProcessCount--;
                }
                this.Batchs.add(newBatch);
                BID++;
            }

            /*if(this.IDs.size() == 0 && BID == 0 && this.ProcessCount == 0){
                System.out.println("Se logro");
                System.out.println(this.Batchs);
                for(int i = 0 ; i < this.Batchs.size() ; i++){
                    System.out.println(this.Batchs.get(i).getActualProcess().getProgramID());
                }
            }*/

            BPMSimulation BPMS = new BPMSimulation();
            BPMS.setVisible(true);

            this.PAG_ID = 0;
            this.PIDField.setText("P0ID");
            this.PANumber.setText("0");
            this.BNNumber.setText("0");

            processesThread = new BPMThread(this.Batchs, BPMS);
            processesThread.start();
        }
        else{
            // PBN mode
            if(this.PBN_Input.getText().isEmpty() || Integer.parseInt(this.PBN_Input.getText()) == 0){
                JOptionPane.showMessageDialog(this, "The number field cant be empty or Zero!");
                this.PBN_Input.requestFocus();
            }else{
                this.randomizePBN();
                
                BPMSimulation BPMS = new BPMSimulation();
                BPMS.setVisible(true);
                BPMS.setBPM(this);
                
                processesThread = new BPMThread(this.PBNBatchs, BPMS);
                processesThread.start();
                BPMS.setThread(processesThread);
            }
        }
    }//GEN-LAST:event_StartSimulationActionPerformed

    private void PBI_BTNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PBI_BTNItemStateChanged
        // TODO add your handling code here:
        this.swapAvalibleFields();
    }//GEN-LAST:event_PBI_BTNItemStateChanged

    private void PBN_InputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PBN_InputKeyTyped
        // TODO add your handling code here:
        if(!(this.PBN_Input.getText() + evt.getKeyChar()).matches("[0-9]+")){
            evt.consume();
        }
    }//GEN-LAST:event_PBN_InputKeyTyped

    private void PBN_InputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PBN_InputKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PBN_InputKeyPressed

    private void PBN_InputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PBN_InputKeyReleased
        // TODO add your handling code here:
        this.calculatePBsPBN();
    }//GEN-LAST:event_PBN_InputKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BPM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BPM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BPM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BPM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BPM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProcess;
    private javax.swing.JLabel BNLabel;
    private javax.swing.JLabel BNLabelPBN;
    private javax.swing.JLabel BNNumber;
    private javax.swing.JLabel BNNumberPBN;
    private javax.swing.JPanel BPMPanel;
    private javax.swing.JTextField METField;
    private javax.swing.JLabel METLabel;
    private javax.swing.JLabel OPLabel;
    private javax.swing.JTextField OPN1Field;
    private javax.swing.JTextField OPN2Field;
    private javax.swing.JComboBox<String> OPOption;
    private javax.swing.JLabel PALabel;
    private javax.swing.JLabel PANumber;
    private javax.swing.JRadioButton PBI_BTN;
    private javax.swing.JRadioButton PBN_BTN;
    private javax.swing.JTextField PBN_Input;
    private javax.swing.ButtonGroup PBX;
    private javax.swing.JTextField PIDField;
    private javax.swing.JLabel PIDLabel;
    private javax.swing.JTextField PNField;
    private javax.swing.JLabel PNLabel;
    private javax.swing.JButton RandomizeData;
    private javax.swing.JButton ResetFields;
    private javax.swing.JButton StartSimulation;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
